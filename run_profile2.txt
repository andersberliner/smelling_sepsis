//anaconda/lib/python2.7/site-packages/matplotlib/__init__.py:872: UserWarning: axes.color_cycle is deprecated and replaced with axes.prop_cycle; please use the latter.
  warnings.warn(self.msg_depr % (key, alt_key))
Loading csv...
Loading data files...
Data loaded in 19 seconds (1196 total trials)
Creating labels...
Test/train split...
Train:  863
Test:  215
Featurizing nt=30 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Featurizing trial  300
Featurizing trial  400
Featurizing trial  500
Featurizing trial  600
Featurizing trial  700
Featurizing trial  800
Regressed 863 trials, n=4 in 72 seconds
Training detection nt=30 ...
Training gram nt=30 ...
Training classification nt=30 ...

 TIMESTEP 30 took 133 seconds
Featurizing nt=40 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Featurizing trial  300
Featurizing trial  400
Featurizing trial  500
Featurizing trial  600
Featurizing trial  700
Featurizing trial  800
Regressed 863 trials, n=4 in 68 seconds
Training detection nt=40 ...
Training gram nt=40 ...
Training classification nt=40 ...

 TIMESTEP 40 took 128 seconds
Featurizing nt=50 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Featurizing trial  300
Featurizing trial  400
Featurizing trial  500
Featurizing trial  600
Featurizing trial  700
Featurizing trial  800
Regressed 863 trials, n=4 in 68 seconds
Training detection nt=50 ...
Training gram nt=50 ...
Training classification nt=50 ...

 TIMESTEP 50 took 94 seconds


>>Model fit (3 times, 863 samples) in 357 seconds (5 mins)<<


Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 16 seconds
Predicting detection nt=30 ...
Predicting gram nt=30 ...
Training classification nt=30 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 17 seconds
Predicting detection nt=40 ...
Predicting gram nt=40 ...
Training classification nt=40 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 17 seconds
Predicting detection nt=50 ...
Predicting gram nt=50 ...
Training classification nt=50 ...


>>Model predictions (3 times, 215 samples) in 50 seconds (0 mins)<<




>>Model scores (3 times, 215 samples) in 0 seconds (0 mins)<<



SERIESMODEL profiling
Look at size of seriesmodel object
206080
N/A size=213632 flat=64
    __dict__ size=213568 flat=3352
    __class__ size=0 flat=0
Look at how the SeriesModel class is doing
---- SUMMARY ------------------------------------------------------------------
                                         active      0     B      average   pct
  seriesmodel.SeriesModel                     0      0     B      0     B    0%
                                         active      0     B      average   pct
  seriesmodel.SeriesModel                     1    217.84 KB    217.84 KB    0%
-------------------------------------------------------------------------------

POLYNOMIALFEATURIZER profiling
Size of PF object
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/Users/andersberliner/Documents/galvanize/Capstone/smelling_sepsis/capstone.py in <module>()
    320         print '\nPOLYNOMIALFEATURIZER profiling'
    321         print 'Size of PF object'
--> 322         print asizeof.asizeof(sm.featurizers['gram'][10])
    323         print asizeof.asized(sm.featurizers['gram'][10], detail=1).format()
    324         print 'Look at how the PolynomialFeaturizer class is doing'

KeyError: 10

In [2]: %paste
print asizeof.asizeof(sm.featurizers['gram'][50])
            print asizeof.asized(sm.featurizers['gram'][50], detail=1).format()
            print 'Look at how the PolynomialFeaturizer class is doing'
            tr_pf.create_snapshot()
            tr_pf.stats.print_summary()

            print '\nSPOTTIMEPLOT profiling'
            print 'Size of a STP object'
            DI = sm.preprocess(X_test)
            PF = PolynomialFeaturizer(n=4, reference_time=2, verbose=True)
            mycoefs, myscores = PF.fit_transform(DI)
            # myscores = PF.score()
            DI_pred = PF.predict(DI, mycoefs)
            STP = SpotTimePlot(y_test, used_column_headers)
            STP.plot_fits(DI, DI_pred)
            print asizeof.asizeof(STP)
            print asizeof.asized(STP, detail=1).format()

            print 'Look at how stp is doing'
            tr_stp.create_snapshot()
            tr_stp.stats.print_summary()

            print '\nLR profiling'
            print 'Sizer of an LR object'
            print asizeof.asizeof(sm.models['classification'][50])
            print asizeof.asized(sm.models['classification'][50], detail=1).format()

            print 'Look at how LR is doing'
            tr_lr.create_snapshot()
            tr_lr.stats.print_summary()

            print 'PROFILING'
            print 'Look at memory leaks up to this point'
            tr.print_diff()
## -- End pasted text --
  File "<ipython-input-2-6128ebf4ca1b>", line 2
    print asizeof.asized(sm.featurizers['gram'][50], detail=1).format()
    ^
IndentationError: unexpected indent


In [3]: %paste
            print asizeof.asizeof(sm.featurizers['gram'][50])
            print asizeof.asized(sm.featurizers['gram'][50], detail=1).format()
            print 'Look at how the PolynomialFeaturizer class is doing'
            tr_pf.create_snapshot()
            tr_pf.stats.print_summary()

            print '\nSPOTTIMEPLOT profiling'
            print 'Size of a STP object'
            DI = sm.preprocess(X_test)
            PF = PolynomialFeaturizer(n=4, reference_time=2, verbose=True)
            mycoefs, myscores = PF.fit_transform(DI)
            # myscores = PF.score()
            DI_pred = PF.predict(DI, mycoefs)
            STP = SpotTimePlot(y_test, used_column_headers)
            STP.plot_fits(DI, DI_pred)
            print asizeof.asizeof(STP)
            print asizeof.asized(STP, detail=1).format()

            print 'Look at how stp is doing'
            tr_stp.create_snapshot()
            tr_stp.stats.print_summary()

            print '\nLR profiling'
            print 'Sizer of an LR object'
            print asizeof.asizeof(sm.models['classification'][50])
            print asizeof.asized(sm.models['classification'][50], detail=1).format()

            print 'Look at how LR is doing'
            tr_lr.create_snapshot()
            tr_lr.stats.print_summary()

            print 'PROFILING'
            print 'Look at memory leaks up to this point'
            tr.print_diff()

## -- End pasted text --
640
<featurizer.PolynomialFeaturizer object at 0x1179249d0> size=640 flat=64
    __dict__ size=576 flat=280
    __class__ size=0 flat=0
Look at how the PolynomialFeaturizer class is doing
---- SUMMARY ------------------------------------------------------------------
                                         active      0     B      average   pct
  featurizer.PolynomialFeaturizer             0      0     B      0     B    0%
                                         active      0     B      average   pct
  featurizer.PolynomialFeaturizer             3      1.30 KB    442     B    0%
-------------------------------------------------------------------------------

SPOTTIMEPLOT profiling
Size of a STP object
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 16 seconds
S:1, G:0, T:0
3695040
<timeseriesplotter.SpotTimePlot object at 0x132ec3350> size=3695616 flat=64
    __dict__ size=3695552 flat=3352
    __class__ size=0 flat=0
Look at how stp is doing
---- SUMMARY ------------------------------------------------------------------
                                         active      0     B      average   pct
  timeseriesplotter.SpotTimePlot              0      0     B      0     B    0%
                                         active      0     B      average   pct
  timeseriesplotter.SpotTimePlot              1      3.52 MB      3.52 MB    0%
-------------------------------------------------------------------------------

LR profiling
Sizer of an LR object
3024
LogisticRegression(args=None) size=3024 flat=64
    __dict__ size=2960 flat=1048
    __class__ size=0 flat=0
Look at how LR is doing
---- SUMMARY ------------------------------------------------------------------
                                         active      0     B      average   pct
  sklearn.linear_model.logistic....           0      0     B      0     B    0%
                                         active      0     B      average   pct
  sklearn.linear_model.logistic....           9     15.60 KB      1.73 KB    0%
-------------------------------------------------------------------------------
PROFILING
Look at memory leaks up to this point
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-3-8889ab78db20> in <module>()
     32 print 'PROFILING'
     33 print 'Look at memory leaks up to this point'
---> 34 tr.print_diff()

//anaconda/lib/python2.7/site-packages/pympler/tracker.pyc in print_diff(self, summary1, summary2)
    136         provided, the diff between these two is used.
    137         """
--> 138         summary.print_(self.diff(summary1=summary1, summary2=summary2))
    139
    140     def format_diff(self, summary1=None, summary2=None):

//anaconda/lib/python2.7/site-packages/pympler/tracker.pyc in diff(self, summary1, summary2)
    114         res = None
    115         if summary2 is None:
--> 116             self.s1 = self.create_summary()
    117             if summary1 is None:
    118                 res = summary.get_diff(self.s0, self.s1)

//anaconda/lib/python2.7/site-packages/pympler/tracker.pyc in create_summary(self)
     89
     90             # do the summary
---> 91             res = summary.summarize(muppy.get_objects())
     92
     93             # remove ids stored in the ref_counter

//anaconda/lib/python2.7/site-packages/pympler/summary.pyc in summarize(objects)
    123     total_size = {}
    124     for o in objects:
--> 125         otype = _repr(o)
    126         if otype in count:
    127             count[otype] += 1

//anaconda/lib/python2.7/site-packages/pympler/summary.pyc in _repr(o, verbosity)
    279         if len(representations[t]) < verbosity:
    280             verbosity = len(representations[t]) - 1
--> 281         res = representations[t][verbosity](o)
    282
    283     res = address.sub('', res)

//anaconda/lib/python2.7/site-packages/pympler/summary.pyc in <lambda>(m)
    100     ]
    101     representations[list] = _list
--> 102     module = [lambda m: "module(%s)" % m.__name__]
    103     representations[types.ModuleType] = module
    104     _set = [

AttributeError: 'module' object has no attribute '__name__'

In [4]: type(STP)
[autoreload of seriesmodel failed: Traceback (most recent call last):
  File "//anaconda/lib/python2.7/site-packages/IPython/extensions/autoreload.py", line 247, in check
    superreload(m, reload, self.old_objects)
ValueError: <lambda>() requires a code object with 3 free vars, not 0
]
Out[4]: timeseriesplotter.SpotTimePlot

In [5]: type(PF)
Out[5]: featurizer.PolynomialFeaturizer

In [6]: type(sm)
Out[6]: seriesmodel.SeriesModel

In [7]: type(LR)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-7-382a19270612> in <module>()
----> 1 type(LR)

NameError: name 'LR' is not defined

In [8]: exit
Anderss-MBP:smelling_sepsis andersberliner$ ipython
Python 2.7.11 |Anaconda 2.3.0 (x86_64)| (default, Dec  6 2015, 18:57:58)
Type "copyright", "credits" or "license" for more information.

IPython 3.2.0 -- An enhanced Interactive Python.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://anaconda.org
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: run capstone
//anaconda/lib/python2.7/site-packages/matplotlib/__init__.py:872: UserWarning: axes.color_cycle is deprecated and replaced with axes.prop_cycle; please use the latter.
  warnings.warn(self.msg_depr % (key, alt_key))
Loading csv...
Loading data files...
Data loaded in 20 seconds (1196 total trials)
Creating labels...
Test/train split...
Train:  863
Test:  215
Featurizing nt=30 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Featurizing trial  300
Featurizing trial  400
Featurizing trial  500
Featurizing trial  600
Featurizing trial  700
Featurizing trial  800
Regressed 863 trials, n=4 in 69 seconds
Training detection nt=30 ...
Training gram nt=30 ...
Training classification nt=30 ...

 TIMESTEP 30 took 133 seconds
Featurizing nt=40 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Featurizing trial  300
Featurizing trial  400
Featurizing trial  500
Featurizing trial  600
Featurizing trial  700
Featurizing trial  800
Regressed 863 trials, n=4 in 70 seconds
Training detection nt=40 ...
Training gram nt=40 ...
Training classification nt=40 ...

 TIMESTEP 40 took 132 seconds
Featurizing nt=50 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Featurizing trial  300
Featurizing trial  400
Featurizing trial  500
Featurizing trial  600
Featurizing trial  700
Featurizing trial  800
Regressed 863 trials, n=4 in 69 seconds
Training detection nt=50 ...
Training gram nt=50 ...
Training classification nt=50 ...

 TIMESTEP 50 took 96 seconds


>>Model fit (3 times, 863 samples) in 363 seconds (6 mins)<<


Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 17 seconds
Predicting detection nt=30 ...
Predicting gram nt=30 ...
Training classification nt=30 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 16 seconds
Predicting detection nt=40 ...
Predicting gram nt=40 ...
Training classification nt=40 ...
Featurizing trial  0
Featurizing trial  100
Featurizing trial  200
Regressed 215 trials, n=4 in 16 seconds
Predicting detection nt=50 ...
Predicting gram nt=50 ...
Training classification nt=50 ...


>>Model predictions (3 times, 215 samples) in 50 seconds (0 mins)<<




>>Model scores (3 times, 215 samples) in 0 seconds (0 mins)<<



SERIESMODEL profiling
Look at size of seriesmodel object
206080
<seriesmodel.SeriesModel object at 0x117d51750> size=213632 flat=64
    __dict__ size=213568 flat=3352
    __class__ size=0 flat=0
Look at how the SeriesModel class is doing
---- SUMMARY ------------------------------------------------------------------
                                         active      0     B      average   pct
  seriesmodel.SeriesModel                     0      0     B      0     B    0%
                                         active      0     B      average   pct
  seriesmodel.SeriesModel                     1    217.84 KB    217.84 KB    0%
-------------------------------------------------------------------------------
PROFILING
Look at memory leaks up to this point
                                       types |   # objects |   total size
============================================ | =========== | ============
                               numpy.ndarray |        7263 |    224.37 MB
                                        list |       20161 |      1.99 MB
                                        dict |        4121 |      1.63 MB
                                         str |       16459 |   1015.46 KB
                   pandas.lib.BlockPlacement |        2369 |    203.59 KB
                                         int |        8489 |    198.96 KB
                                       tuple |        2484 |    162.17 KB
  <class 'pandas.core.internals.BlockManager |        1228 |    153.50 KB
                         function (<lambda>) |        1233 |    144.49 KB
                   pandas.index.ObjectEngine |        1225 |    124.41 KB
                                        code |         890 |    111.25 KB
      <class 'pandas.core.internals.IntBlock |        1203 |    103.38 KB
    <class 'pandas.core.internals.FloatBlock |        1130 |     97.11 KB
                                       slice |        2364 |     92.34 KB
        <class 'pandas.core.index.Int64Index |        1229 |     76.81 KB



In [2]: asizeof.asizeof(df)
Out[2]: 244536

In [3]: print asizeof.asized(df, detail=1).format()
               Genus     Species Subsp....     False

[1078 rows x 27 columns] size=244920 flat=64
    __dict__ size=244856 flat=280
    __class__ size=0 flat=0

In [4]: df.iloc[0]['data']
Out[4]:
array([[    0.,  2051.,  1973., ...,  2851.,  2893.,  2801.],
       [   20.,  2019.,  1955., ...,  2838.,  2883.,  2779.],
       [   40.,  1993.,  1943., ...,  2832.,  2877.,  2775.],
       ...,
       [ 1280.,  1814.,  1748., ...,  2802.,  2845.,  2734.],
       [ 1300.,  1818.,  1745., ...,  2802.,  2846.,  2739.],
       [ 1320.,  1822.,  1745., ...,  2804.,  2845.,  2741.]])

In [5]: asizeof.asizeof(df.iloc[0]['data'])
Out[5]: 112
